### STAGE 1: Build ###

# We label our stage as ‘builder’
FROM node:10-alpine as builder

COPY package.json package-lock.json ./

## Storing node modules on a separate layer will prevent unnecessary npm installs at each build

RUN npm ci && mkdir /ng-app && mv ./node_modules ./ng-app

WORKDIR /ng-app

COPY . .

## Build the angular app in production mode and store the artifacts in dist folder

RUN npm run ng build --aot=false --output-hashing=all --prod --output-path=dist

### STAGE 2: Setup ###

FROM nginx:1.14.1-alpine

## Copy our default nginx config
COPY nginx/default.conf /etc/nginx/conf.d/
RUN mkdir /etc/nginx/certs
COPY domain.crt  /etc/nginx/certs/domain.crt
COPY domain.key  /etc/nginx/certs/domain.key


## Remove default nginx website
RUN rm -rf /usr/share/nginx/html/*

## From ‘builder’ stage copy over the artifacts in dist folder to default nginx public folder
COPY --from=builder /ng-app/dist /usr/share/nginx/html

CMD ["nginx", "-g", "daemon off;"]


# FROM nginx:1.13.3-alpine

# ENV APP_PATH /app
# ENV PATH $APP_PATH/node_modules/@angular/cli/bin/:$PATH
# RUN apk add --update --no-cache nodejs && mkdir $APP_PATH && rm -rf /etc/nginx/conf.d/*

# WORKDIR $APP_PATH

# COPY . .

# COPY nginx/default.conf /etc/nginx/conf.d/

# RUN npm install \
#   && ng build --aot=false --prod \
#   && rm -rf /usr/share/nginx/html/* \
#   && mv ./dist/* /usr/share/nginx/html/ \
#   && npm cache clean \
#   && apk del nodejs libstdc++ libgcc libuv http-parser ca-certificates \
#   && rm -rf ./*

# CMD ["nginx", "-g", "daemon off;"]
